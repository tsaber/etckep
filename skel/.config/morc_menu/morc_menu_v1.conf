# morc_menu_v1.conf
# configuration file in support of morc_menu

# To begin allowing you to customize the 'look' or 'skin' of the menu,
# some explanation is called for: By default, the script uses a
# low-resource front-end application called 'dmenu' to present its
# menus. In this configuration file, you are be able to change the
# parameters that the script uses to invoke 'dmenu', or you may
# replace 'dmenu' with another front-end. The script has been tested
# with front-ends 'rofi' and 'zenity', and may also work with 'yada'
# and others. The script also allows you to import 'look' and 'skin'
# data from definitions in other configuration files, to help you
# maintain a consistent 'look' across different programs.

# If you wish to import import 'look' and 'skin' data from definitions
# in other configuration files, you must perform that first, before
# defining how you wish to invoke your chosen front-end (sensible, as
# in that situation, the invocation will be using definitions from
# those files). You may define as many 'external_definition_file's as
# you like. They will be read in the order you present them here, so
# in a case of conflicting definitions, the last one wins. If the file
# does not exist or can't be read, it is ignored, and the script
# continues. The script will only read lines in the form 'foo=bar'. In
# our default example we are reading a configuration file meant for
# 'dmenu' usage.
external_skin_definition_file=${HOME}/.dmenurc

# Customize where on the screen you wish the menu to appear. If you
# want the menu to appear at the wherever the mouse pointer is
# resting, set the variable 'use_mouse_position' to 'TRUE', and you're
# done - the script will figure out the correct x and y positions at
# run-time. Otherwise, the script will always place the menu at the
# 'x_position' and 'y_position' definitions you set below. All the
# numeric values in this block are measured in pixels.
# IMPORTANT:
#   This only works when the 'menu_cmd' definition below correctly
#   uses the string literals X_POSITION, Y_POSITION, as is the case in
#   the default and in the examples below. Additionally, MENU_LINES
#   and MENU_WIDTH must be correctly used, as in the examples below,
#   in order for dynamically positioned menus not to try to display
#   beyond the screen edge, and for there not to display unnecessary
#   whitespace.
x_position=300
y_position=20
# Until we learn how to directly measure font width and height, we
# need to set 'line_height', 'avg_char_width', and 'menu_width'
# manually by trial and error. If 'avg_char_width' is not zero, then
# 'menu_width' will be ignored, and the value will be calculated at
# run-time.
line_height=22
avg_char_width=13
menu_width=350
# use_mouse_position=TRUE
use_mouse_position=TRUE

# The third and final, step in customizing the 'look' or 'skin' of the
# menu is to modify how the script invokes its menu command
# ('menu_cmd') and its error notification (error_cmd'). In general,
# the options available to you are limited by those of your chosen
# front-end, so refer to its man page and other documentation.
# Additionally, you may refer to variables defined in one of the
# 'external_skin_definition_file's you specified above, and you may
# use variables 'x_position' and 'y_position' to set where on the
# screen you want your menu. Here are some examples:
# IMPORTANT:
#   In order for the script to properly position the menu, these
#   definitions must include parameters that correctly use the string
#   literals X_POSITION, Y_POSITION, MENU_LINES, and MENU_WIDTH, as is
#   the case in the default and in the examples below. Additionally,
#   MENU_LINES and MENU_WIDTH must be correctly used, as in the
#   examples below, in order for dynamically positioned menus not to
#   try to display beyond the screen edge, and for there not to
#   display unnecessary whitespace.
#
# The script's default, using 'dmenu' 
#menu_cmd="dmenu -i -l MENU_LINES -x X_POSITION -y Y_POSITION -w MENU_WIDTH "
#menu_cmd="dmenu -i -l MENU_LINES -x X_POSITION -y Y_POSITION -w MENU_WIDTH "

# Using a variable defined in an external_skin_definition_file, in
# this case ${HOME}/.dmenurc
menu_cmd="dmenu -i -l MENU_LINES -x X_POSITION -y Y_POSITION -w MENU_WIDTH ${DMENU_OPTIONS}"

# Using 'zenity' and 'rofi'
# Because there ought to be some reward for reading all this
# documentation, note the use of the embedded linux command 'uname' to
# set the zenity column title. 
# menu_cmd="zenity --list --column=$(uname -no) "
# menu_cmd="rofi "


# Customize the 'look' or 'skin' of the error messages by modifying
# the following string, which, as above for the menu command, will be
# used to invoke your choice of menu front end.
error_cmd="dmenu -i -l 40 -x 500 -y 150 -w 350 -nb red -nf black -fn DejaVu"
# error_cmd="zenity --error "
# error_cmd="rofi "


# Distinguish between an executable item and a sub-menu selection
menu_prefix=" "
menu_suffix=" >"
# If a 'menu_suffix' is defined, you can have the script align them
# vertically, but this only works if you are using a fixed width font,
# so if you've selected a proportional font, set 'align_suffix' to
# 'FALSE'.
align_suffix=TRUE

# Desired categories: Any single .desktop definition can include an
# arbitrarily long list of categories for itself, which would bloat
# the menu with duplicate clutter, so the following space-delimited
# variable white-lists the desired categories.
desired_categories="Favorites Settings Development Documentation Education System Network Utility Graphics Office AudioVideo"


# Category aliases: The common convention seems to be to rename some
# categories, as in the default below. We implement the renaming sing
# an associative array in which the index is the category as defined
# in the .desktop file, and the value is the desired output
declare -A category_aliases=( [Utility]=Accessories [AudioVideo]=Multimedia [Network]=Internet )


# Unwanted names and execs: Entries with these names or execution
# statements should black-listed from the menu.
unwanted_names=( feh )
unwanted_execs=( )


# Maximum number of backups to keep: because almost no one will notice
# accumulating cruft. Backups are automatically created in the user's
# ${HOME}/.config/morc_menu folder, in the form
# "categorized_menu${ext}_%y-%m-%d-%T" where ${ext} is either ".txt"
# or "_xml.txt" and the suffix is a timestamp. If you want to keep a
# particular backup forever, rename it to fail a match against
# "categorized_menu${ext}_*"
max_num_backups=5

# Information about the menu and how to customize it are by default
# presented in a trailng menu entry "about morc_menu". You may exclude
# presentation of that menu item by setting 'exclude_about' to TRUE
exclude_about="TRUE"
#exclude_about="False"

# Adding top-level menu entries for frequently used applications:
# That's what 'favorites' are. See below for how to do that.

# Adding 'favorites' and custom entries: Neither of those
# customizations are performed in this configuration file. In both
# cases, define each extra entry by creating a new ".desktop" file or
# by editing an existing one. For system-wide customization, this will
# be performed by a system administrator in the
# /usr/share/applications folder; For user-personal customizations,
# this will be performed by the user in the
# ${HOME}/.local/share/applications folder. Favorites are defined by
# adding that word to the list of categories in the .desktop file.
# Other additional entries are made by adding a new .desktop file, or
# adding a category to an existing one.